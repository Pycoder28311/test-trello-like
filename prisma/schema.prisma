// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  password     String?
  createdAt DateTime @default(now())
  lastProjectId String?

  passwordResets PasswordReset[]
  sessions       Session[]
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Project {
  id        String   @id @default(cuid())
  title     String
  isActive  Boolean  @default(true)
  isNew     Boolean  @default(true)
  favicon   String?  // optional
  position  Int

  columns   Column[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Column {
  id        String  @id @default(cuid())
  title     String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  position  Int

  cards     Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          String         @id @default(cuid())
  content     String
  description String?        // optional
  column      Column         @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId    String
  position  Int

  checklist   ChecklistItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChecklistItem {
  id       String @id @default(cuid())
  text     String
  completed Boolean @default(false)
  card     Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId   String
  position  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}